{"author":"PWB","version":"1.2.4","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"tk-mapper","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"tk-mapper","typeMapper":{"Default":{"name":"Default","elementList":[{"matchType":"REGEX","columnType":"varchar(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"char(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"(tiny|medium|long)*text","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"decimal(\\(\\d+,\\d+\\))?","javaType":"java.lang.Double"},{"matchType":"ORDINARY","columnType":"integer","javaType":"java.lang.Integer"},{"matchType":"REGEX","columnType":"(tiny|small|medium)*int(\\(\\d+\\))?","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int4","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int8","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"bigint(\\(\\d+\\))?","javaType":"java.lang.Long"},{"matchType":"ORDINARY","columnType":"date","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"datetime","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"timestamp","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"time","javaType":"java.time.LocalTime"},{"matchType":"ORDINARY","columnType":"boolean","javaType":"java.lang.Boolean"}]}},"template":{"tk-mapper":{"name":"tk-mapper","elementList":[{"name":"controller.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\nimport $!{tableInfo.savePackageName}.boot.restful.RestResponse;\nimport $!{tableInfo.savePackageName}.boot.restful.RestResult;\nimport $!{tableInfo.savePackageName}.boot.restful.RestDTO;\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.model.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport com.github.pagehelper.PageInfo;\nimport lombok.RequiredArgsConstructor;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"表控制层\")\n\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\n@Api(tags = \"$!{tableInfo.comment}相关功能API\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n\n/**\n* 服务对象\n*/\nprivate final $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n\n/**\n* 分页查询\n*\n* @param dto 分页对象\n* @return 查询结果\n*/\n@ApiOperation(\"分页查询\")\n@PostMapping(\"doQueryByPage\")\npublic RestResult<PageInfo<$!{tableInfo.name}VO>> doQueryByPage(@RequestBody RestDTO<Object> dto) {\nreturn RestResponse.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage(dto));\n}\n\n/**\n* 通过主键查询单条数据\n*\n* @param id 主键\n* @return 单条数据\n*/\n@ApiOperation(\"通过主键查询单条数据\")\n@GetMapping(\"doQueryById/{id}\")\npublic RestResult<$!{tableInfo.name}VO> doQueryById(@PathVariable(\"id\") $!pk.shortType id) {\nreturn RestResponse.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n}\n\n/**\n* 新增数据\n*\n* @param dto 实体\n* @return 新增结果\n*/\n@ApiOperation(\"新增数据\")\n@PostMapping(\"doAdd\")\npublic RestResult<Boolean> doAdd(@RequestBody $!{tableInfo.name}DTO dto) {\nreturn RestResponse.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.add(dto));\n}\n\n/**\n* 编辑数据\n*\n* @param dto 实体\n* @return 编辑结果\n*/\n@ApiOperation(\"编辑数据\")\n@PutMapping(\"doEdit\")\npublic RestResult<Boolean> doEdit(@RequestBody $!{tableInfo.name}DTO dto) {\nreturn RestResponse.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update(dto));\n}\n\n/**\n* 删除数据\n*\n* @param id 主键\n* @return 删除是否成功\n*/\n@ApiOperation(\"删除数据\")\n@DeleteMapping(\"doDeleteById/{id}\")\npublic RestResult<Boolean> doDeleteById(@PathVariable(\"id\") $!pk.shortType id) {\n  return RestResponse.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n  }\n\n}\n"},{"name":"serviceImpl.java.vm","code":"##导入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\nimport $!{tableInfo.savePackageName}.boot.restful.RestDTO;\nimport $!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.model.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport com.github.pagehelper.PageInfo;\nimport com.github.pagehelper.PageHelper;\nimport javax.annotation.Resource;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"表服务实现类\")\n\n@Service\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n\n@Resource\nprivate $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\n/**\n* 通过ID查询单条数据\n*\n* @param $!pk.name 主键\n* @return 实例对象\n*/\n@Override\npublic $!{tableInfo.name}VO queryById($!pk.shortType $!pk.name) {\nreturn null;\n}\n\n/**\n* 分页查询\n*\n* @param dto 分页对象\n* @return 查询结果\n*/\n@Override\npublic PageInfo<$!{tableInfo.name}VO> queryByPage(RestDTO<Object> dto) {\n  PageHelper.startPage(dto.getPageNum(), dto.getPageSize());\nreturn null;\n}\n\n/**\n* 新增数据\n*\n* @param dto 实例对象\n* @return 实例对象\n*/\n@Override\npublic Boolean add($!{tableInfo.name}DTO dto) {\n  $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = new  $!{tableInfo.name}();\n  return this.$!{tool.firstLowerCase($tableInfo.name)}Dao.insertSelective($!{tool.firstLowerCase($tableInfo.name)}) == 1;\n}\n\n/**\n* 修改数据\n*\n* @param dto 实例对象\n* @return 实例对象\n*/\n@Override\npublic Boolean update($!{tableInfo.name}DTO dto) {\n    $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = new  $!{tableInfo.name}();\n  return this.$!{tool.firstLowerCase($tableInfo.name)}Dao.updateByPrimaryKeySelective($!{tool.firstLowerCase($tableInfo.name)}) == 1;\n}\n\n/**\n* 通过主键删除数据\n*\n* @param $!pk.name 主键\n* @return 是否成功\n*/\n@Override\npublic Boolean deleteById($!pk.shortType $!pk.name) {\n  return this.$!{tool.firstLowerCase($tableInfo.name)}Dao.deleteByPrimaryKey($!pk.name) == 1;\n}\n\n  /* =================================================【以下为私有方法区域】=================================================================*/\n}\n"},{"name":"service.java.vm","code":"##导入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\nimport $!{tableInfo.savePackageName}.boot.restful.RestDTO;\nimport $!{tableInfo.savePackageName}.model.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}DTO;\nimport com.github.pagehelper.PageInfo;\n\n##使用宏定义实现类注释信息\n#tableComment(\"表服务接口\")\n\npublic interface $!{tableName} {\n\n/**\n* 通过ID查询单条数据\n*\n* @param $!pk.name 主键\n* @return 实例对象\n*/\n$!{tableInfo.name}VO queryById($!pk.shortType $!pk.name);\n\n/**\n* 分页查询\n*\n* @param dto 分页对象\n* @return 查询结果\n*/\nPageInfo<$!{tableInfo.name}VO> queryByPage(RestDTO<Object> dto);\n\n/**\n* 新增数据\n*\n* @param dto 实例对象\n* @return Boolean\n*/\nBoolean add($!{tableInfo.name}DTO dto);\n\n/**\n* 修改数据\n*\n* @param dto 实例对象\n* @return Boolean\n*/\n  Boolean update($!{tableInfo.name}DTO dto);\n\n/**\n* 通过主键删除数据\n*\n* @param $!pk.name 主键\n* @return 是否成功\n*/\n  Boolean deleteById($!pk.shortType $!pk.name);\n\n\n}\n"},{"name":"objectVO.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#saveFile(\"/model/vo\",\"$!{tableInfo.name}VO\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"model.vo\")\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport java.util.Date;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n\n@ApiModel(\"$!{tableInfo.comment}model\")\n@Data\npublic class $!{tableInfo.name}VO {\n#foreach($column in $tableInfo.fullColumn)\n\n@ApiModelProperty(value = \"$!{column.comment}\")\n#if ($column.type.indexOf(\"Date\")>-1)\n@JsonFormat(timezone = \"GMT+8\", pattern = \"yyyy-MM-dd HH:mm:ss\")\n#end\nprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n\n}\n"},{"name":"objectDTO.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#saveFile(\"/model/dto\",\"$!{tableInfo.name}DTO\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"model.dto\")\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport java.util.Date;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n\n@ApiModel(\"$!{tableInfo.comment}model\")\n@Data\npublic class $!{tableInfo.name}DTO {\n#foreach($column in $tableInfo.fullColumn)\n\n@ApiModelProperty(value = \"$!{column.comment}\")\n#if ($column.type.indexOf(\"Date\")>-1)\n@JsonFormat(timezone = \"GMT+8\", pattern = \"yyyy-MM-dd HH:mm:ss\")\n#end\nprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n\n}\n"},{"name":"mapper.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n  <!--查询单个-->\n  <select id=\"findOne\" resultType=\"$!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name}\">\n    select\n      #allSqlColumn()\n\n    from $!tableInfo.obj.name\n    <where>\n        #foreach($column in $tableInfo.fullColumn)\n          <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n            and $!column.obj.name = #{$!column.name}\n          </if>\n        #end\n    </where>\n    limit 0, 1\n  </select>\n\n\n</mapper>\n"},{"name":"entity.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/model/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"model.entity\")\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport java.util.Date;\nimport javax.persistence.*;\nimport lombok.Data;\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n@Table(name = \"$!{tableInfo.obj.name}\")\npublic class $!{tableInfo.name}{\n#foreach($column in $tableInfo.fullColumn)\n    ##定义实体类属性：#doField($column)\n    #doField($column)\n#end\n\n\n}\n"},{"name":"debug.json.vm","code":"//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"},{"name":"dao.java.vm","code":"##导入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.boot.component.tk.TKMapper;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"表数据库访问层\")\n\npublic interface $!{tableName} extends TKMapper<$!{tableInfo.name}>{\n\n/**\n* 查询单条数据\n*\n* @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n* @return 返回对象\n*/\n$!{tableInfo.name} findOne($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n}\n"}]}},"columnConfig":{"Default":{"name":"Default","elementList":[{"title":"disable","type":"BOOLEAN","selectValue":""},{"title":"support","type":"SELECT","selectValue":"add,edit,query,del,ui"}]}},"globalConfig":{"tk-mapper":{"name":"tk-mapper","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n    #if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\",\"ObjectVO\", \".java\")\n#macro(saveFile $path $fileName $suffix)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($fileName, $suffix))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * @description: $!{tableInfo.comment}($!{tableInfo.name})$desc <br>\n * @author: $!author <br>\n * @since: 1.0 <br>\n * @date: $!time.currTime() <br>\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    #if(${column.comment})\n/**\n     * 获取${column.comment}\n     */\n    #end\npublic $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    #if(${column.comment})\n/**\n     * 设置${column.comment}\n     */\n    #end\npublic void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end\n\n\n##定义实体类属性：#doField($column)\n#macro(doField $column)\n\n    #if(${column.comment})\n/**\n      * $!{column.comment}\n      */\n    #end\n\n    #if(($column.obj.name.indexOf(\"id\")>-1 || $column.obj.name.indexOf(\"ID\")>-1) && $column.obj.name.length()<3)\n@Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    #end\n\n    #if($column.obj.name != $column.name)\n@Column(name = \"$!{column.obj.name}\")\n    #end\nprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}